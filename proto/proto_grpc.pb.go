// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookProfilesClient is the client API for BookProfiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookProfilesClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Get(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*ManyResponse, error)
	GetById(ctx context.Context, in *WorkOnlyIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	Discount(ctx context.Context, in *DiscountRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Delete(ctx context.Context, in *WorkOnlyIdRequest, opts ...grpc.CallOption) (*MainResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ManyResponse, error)
}

type bookProfilesClient struct {
	cc grpc.ClientConnInterface
}

func NewBookProfilesClient(cc grpc.ClientConnInterface) BookProfilesClient {
	return &bookProfilesClient{cc}
}

func (c *bookProfilesClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/proto.BookProfiles/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookProfilesClient) Get(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*ManyResponse, error) {
	out := new(ManyResponse)
	err := c.cc.Invoke(ctx, "/proto.BookProfiles/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookProfilesClient) GetById(ctx context.Context, in *WorkOnlyIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, "/proto.BookProfiles/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookProfilesClient) Discount(ctx context.Context, in *DiscountRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/proto.BookProfiles/Discount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookProfilesClient) Delete(ctx context.Context, in *WorkOnlyIdRequest, opts ...grpc.CallOption) (*MainResponse, error) {
	out := new(MainResponse)
	err := c.cc.Invoke(ctx, "/proto.BookProfiles/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookProfilesClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ManyResponse, error) {
	out := new(ManyResponse)
	err := c.cc.Invoke(ctx, "/proto.BookProfiles/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookProfilesServer is the server API for BookProfiles service.
// All implementations must embed UnimplementedBookProfilesServer
// for forward compatibility
type BookProfilesServer interface {
	Create(context.Context, *CreateRequest) (*MainResponse, error)
	Get(context.Context, *GetBooksRequest) (*ManyResponse, error)
	GetById(context.Context, *WorkOnlyIdRequest) (*GetByIdResponse, error)
	Discount(context.Context, *DiscountRequest) (*MainResponse, error)
	Delete(context.Context, *WorkOnlyIdRequest) (*MainResponse, error)
	Search(context.Context, *SearchRequest) (*ManyResponse, error)
	mustEmbedUnimplementedBookProfilesServer()
}

// UnimplementedBookProfilesServer must be embedded to have forward compatible implementations.
type UnimplementedBookProfilesServer struct {
}

func (UnimplementedBookProfilesServer) Create(context.Context, *CreateRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBookProfilesServer) Get(context.Context, *GetBooksRequest) (*ManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBookProfilesServer) GetById(context.Context, *WorkOnlyIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedBookProfilesServer) Discount(context.Context, *DiscountRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discount not implemented")
}
func (UnimplementedBookProfilesServer) Delete(context.Context, *WorkOnlyIdRequest) (*MainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBookProfilesServer) Search(context.Context, *SearchRequest) (*ManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedBookProfilesServer) mustEmbedUnimplementedBookProfilesServer() {}

// UnsafeBookProfilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookProfilesServer will
// result in compilation errors.
type UnsafeBookProfilesServer interface {
	mustEmbedUnimplementedBookProfilesServer()
}

func RegisterBookProfilesServer(s grpc.ServiceRegistrar, srv BookProfilesServer) {
	s.RegisterService(&BookProfiles_ServiceDesc, srv)
}

func _BookProfiles_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookProfilesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookProfiles/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookProfilesServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookProfiles_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookProfilesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookProfiles/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookProfilesServer).Get(ctx, req.(*GetBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookProfiles_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkOnlyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookProfilesServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookProfiles/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookProfilesServer).GetById(ctx, req.(*WorkOnlyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookProfiles_Discount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookProfilesServer).Discount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookProfiles/Discount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookProfilesServer).Discount(ctx, req.(*DiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookProfiles_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkOnlyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookProfilesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookProfiles/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookProfilesServer).Delete(ctx, req.(*WorkOnlyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookProfiles_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookProfilesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookProfiles/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookProfilesServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookProfiles_ServiceDesc is the grpc.ServiceDesc for BookProfiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookProfiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BookProfiles",
	HandlerType: (*BookProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BookProfiles_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BookProfiles_Get_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _BookProfiles_GetById_Handler,
		},
		{
			MethodName: "Discount",
			Handler:    _BookProfiles_Discount_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BookProfiles_Delete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _BookProfiles_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
